"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Crypt = void 0;
var crypto_js_1 = __importDefault(require("crypto-js"));
var keySize = 256;
var iterations = 100;
var Crypt = /** @class */ (function () {
    function Crypt() {
        this.decrypt = function (transitmessage, pass) {
            try {
                var salt = crypto_js_1.default.enc.Hex.parse(transitmessage.substr(0, 32));
                var iv = crypto_js_1.default.enc.Hex.parse(transitmessage.substr(32, 32));
                var encrypted = transitmessage.substring(64);
                var key = crypto_js_1.default.PBKDF2(pass, salt, {
                    keySize: keySize / 32,
                    iterations: iterations,
                });
                var decrypted = crypto_js_1.default.AES.decrypt(encrypted, key, {
                    iv: iv,
                    padding: crypto_js_1.default.pad.Pkcs7,
                    mode: crypto_js_1.default.mode.CBC,
                }).toString(crypto_js_1.default.enc.Utf8);
                return decrypted;
            }
            catch (error) {
                return '';
            }
        };
        this.encrypt = function (msg, pass) {
            try {
                var salt = crypto_js_1.default.lib.WordArray.random(128 / 8);
                var key = crypto_js_1.default.PBKDF2(pass, salt, {
                    keySize: keySize / 32,
                    iterations: iterations,
                });
                var iv = crypto_js_1.default.lib.WordArray.random(128 / 8);
                var encrypted = crypto_js_1.default.AES.encrypt(msg, key, {
                    iv: iv,
                    padding: crypto_js_1.default.pad.Pkcs7,
                    mode: crypto_js_1.default.mode.CBC,
                });
                var transitmessage = salt.toString() + iv.toString() + encrypted.toString();
                return transitmessage;
            }
            catch (error) {
                return '';
            }
        };
    }
    return Crypt;
}());
exports.Crypt = Crypt;
//# sourceMappingURL=Crypt.js.map